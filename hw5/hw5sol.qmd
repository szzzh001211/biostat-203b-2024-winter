---
title: "Biostat 203B Homework 5"
subtitle: Due Mar 22 @ 11:59PM
author: "Ziheng Zhang_606300061"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false

---

## Predicting ICU duration

Using the ICU cohort `mimiciv_icu_cohort.rds` you built in Homework 4, develop at least three machine learning approaches (logistic regression with enet regularization, random forest, boosting, SVM, MLP, etc) plus a model stacking approach for predicting whether a patient's ICU stay will be longer than 2 days. You should use the `los_long` variable as the outcome. You algorithms can use patient demographic information (gender, age at ICU `intime`, marital status, race), ICU admission information (first care unit), the last lab measurements before the ICU stay, and first vital measurements during ICU stay as features. You are welcome to use any feature engineering techniques you think are appropriate; but make sure to not use features that are not available at an ICU stay's `intime`. For instance, `last_careunit` cannot be used in your algorithms. 

1. Data preprocessing and feature engineering.
```{r, eval=TRUE}
library(tidyverse)
library(tidymodels)
library(gtsummary)
library(xgboost)
library(keras)
library(vip)
library(stacks)
```

```{r, eval=TRUE}
mimiciv_icu_cohort <- 
  readRDS("../hw4/mimiciv_shiny/mimic_icu_cohort.rds") |>
  select(subject_id, hadm_id, stay_id, first_careunit, gender, race, 
         marital_status, age_intime, bicarbonate, chloride, creatinine, 
         glucose, potassium, sodium, hematocrit, wbc, heart_rate, 
         non_invasive_blood_pressure_systolic, 
         non_invasive_blood_pressure_diastolic, respiratory_rate, 
         temperature_fahrenheit, los_long) |>
  mutate(race = as.character(race), 
         first_careunit = as.character(first_careunit), 
         los_long = as.factor(los_long))

mimiciv_icu_cohort |> tbl_summary(by = los_long, include = -c(subject_id, 
                                                              hadm_id, 
                                                              stay_id))
```

2. Partition data into 50% training set and 50% test set. Stratify partitioning according to `los_long`. For grading purpose, sort the data by `subject_id`, `hadm_id`, and `stay_id` and use the seed `203` for the initial data split. Below is the sample code.
```{r, eval=TRUE}
set.seed(203)

# sort
mimiciv_icu_cohort <- mimiciv_icu_cohort |>
  arrange(subject_id, hadm_id, stay_id)

data_split <- initial_split(
  mimiciv_icu_cohort, 
  # stratify by los_long
  strata = "los_long", 
  prop = 0.5
  )
```

```{r, eval=TRUE}
mimic_train <- training(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)
head(mimic_train)
dim(mimic_train)

mimic_test <- testing(data_split) |>
  select(-subject_id, -hadm_id, -stay_id)
head(mimic_test)
dim(mimic_test)
```
3. Train and tune the models using the training set.

**Interpretation:** There are missing values in `marital_status`, all lab measurements and all first vital measurements. Missing proportion is not high but there are some outliers for two measurements, so we will use simple median imputation for all numerical features and mode imputation for `marital_status`. **First we use Logistic Regression and the workflow is as follows:**
```{r, eval=TRUE}
# set recipe
logit_recipe <- recipe(los_long ~ ., data = mimic_train) |>
  
  # impute missing values with mean
  step_impute_median(bicarbonate, chloride, creatinine, glucose, potassium, 
                       sodium, hematocrit, wbc, heart_rate, 
                       non_invasive_blood_pressure_systolic, 
                       non_invasive_blood_pressure_diastolic, respiratory_rate, 
                       temperature_fahrenheit) |>
  
  # impute missing values with mode
  step_impute_mode(marital_status) |>
  
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  
  print()
```

```{r, eval=TRUE}
# logistic regression
logit_mod <- 
  logistic_reg(
    penalty = tune(), 
    mixture = tune()
  ) |> 
  set_engine("glmnet", standardize = FALSE)

logit_wf <- workflow() |>
  add_recipe(logit_recipe) |>
  add_model(logit_mod)
```

```{r, eval=TRUE}
param_grid <- grid_regular(
  penalty(range = c(-5, 1)), 
  mixture(),
  levels = c(100, 5)
  )
param_grid
```

```{r, eval=TRUE}
set.seed(203)

folds <- vfold_cv(mimic_train, v = 5)

logit_fit <- logit_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
```

```{r, eval=TRUE}
logit_fit |>
  # aggregate metrics from K folds
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = penalty, y = mean, color = factor(mixture))) +
  geom_point() +
  labs(x = "Penalty", y = "CV AUC") +
  scale_x_log10()

best_logit <- logit_fit |>
  select_best("roc_auc")

best_logit

final_wf_logit <- logit_wf |>
  finalize_workflow(best_logit)

final_fit_logit <- final_wf_logit |> 
  last_fit(data_split)

final_fit_logit |> 
  collect_metrics()


```
**Answer:** When `fold` = 5, the best model has `penalty` = 0.000869749 and `mixture` = 0.5. The best model has a `roc_auc` value of 0.594 and an `accuracy` of 0.572.


**Second we use XGBoost and the workflow is as follows:**
```{r, eval=TRUE}
# set recipe
gb_recipe <- recipe(los_long ~ ., data = mimic_train) |>
  
  # impute missing values with mean
  step_impute_median(bicarbonate, chloride, creatinine, glucose, potassium, 
                       sodium, hematocrit, wbc, heart_rate, 
                       non_invasive_blood_pressure_systolic, 
                       non_invasive_blood_pressure_diastolic, respiratory_rate, 
                       temperature_fahrenheit) |>
  
  # impute missing values with mode
  step_impute_mode(marital_status) |>
  
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  
  print()
```

```{r, eval=TRUE}
# xgboost
gb_mod <- 
  boost_tree(
    mode = "classification",
    mtry = 9,
    trees = 500, 
    tree_depth = tune(),
    learn_rate = tune()
  ) |> 
  set_engine("xgboost")

gb_wf <- workflow() |>
  add_recipe(gb_recipe) |>
  add_model(gb_mod)
```

```{r, eval=TRUE}
param_grid <- grid_regular(
  tree_depth(range = c(1L, 4L)),
  learn_rate(range = c(-3, -0.5), trans = log10_trans()),
  levels = c(4, 12)
  )

param_grid
```

```{r, eval=TRUE}
set.seed(203)

folds <- vfold_cv(mimic_train, v = 5)

gb_fit <- gb_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
```

```{r, eval=TRUE}
gb_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = learn_rate, y = mean, color = factor(tree_depth))) +
  geom_point() +
  labs(x = "Learning Rate", y = "CV AUC") +
  scale_x_log10()

best_gb <- gb_fit |>
  select_best("roc_auc")

best_gb

final_wf_gb <- gb_wf |>
  finalize_workflow(best_gb)

final_fit_gb <- final_wf_gb |> 
  last_fit(data_split)

final_fit_gb |> 
  collect_metrics()

```
**Answer:** When `fold` = 5, the best model has `learning rate` = 0.0658 and `tree depth` = 4. The best model has a `roc_auc` value of 0.636 and an `accuracy` of 0.597.



**Third we use MLP and the workflow is as follows:**
```{r, eval=TRUE}
# set recipe
mlp_recipe <- recipe(los_long ~ ., data = mimic_train) |>
  
  # impute missing values with mean
  step_impute_median(bicarbonate, chloride, creatinine, glucose, potassium, 
                       sodium, hematocrit, wbc, heart_rate, 
                       non_invasive_blood_pressure_systolic, 
                       non_invasive_blood_pressure_diastolic, respiratory_rate, 
                       temperature_fahrenheit) |>
  
  # impute missing values with mode
  step_impute_mode(marital_status) |>
  
  # create traditional dummy variables
  step_dummy(all_nominal_predictors()) |>
  
  # zero-variance filter
  step_zv(all_numeric_predictors()) |> 
  
  # center and scale numeric data
  step_normalize(all_numeric_predictors()) |>
  
  print()

```

```{r, eval=TRUE}
mlp_mod <- 
  mlp(
    mode = "classification",
    hidden_units = tune(),
    dropout = tune(),
    epochs = 30,
  ) |> 
  set_engine("keras", verbose = 0)

mlp_wf <- workflow() |>
  add_recipe(mlp_recipe) |>
  add_model(mlp_mod)
```

```{r, eval=TRUE}
param_grid <- grid_regular(
  hidden_units(range = c(1, 20)),
  dropout(range = c(0, 0.5)),
  levels = 5
  )
param_grid
```

```{r, eval=TRUE}
set.seed(203)

folds <- vfold_cv(mimic_train, v = 2)

mlp_fit <- mlp_wf |>
  tune_grid(
    resamples = folds,
    grid = param_grid,
    metrics = metric_set(roc_auc, accuracy)
    )
```

```{r, eval=TRUE}
mlp_fit |>
  collect_metrics() |>
  print(width = Inf) |>
  filter(.metric == "roc_auc") |>
  ggplot(mapping = aes(x = dropout, y = mean, color = factor(hidden_units))) +
  geom_point() +
  labs(x = "Dropout Rate", y = "CV AUC") +
  scale_x_log10()

best_mlp <- mlp_fit |>
  select_best("roc_auc")

best_mlp

final_wf_mlp <- mlp_wf |>
  finalize_workflow(best_mlp)

final_fit_mlp <- final_wf_mlp |> 
  last_fit(data_split)

final_fit_mlp |> 
  collect_metrics()

```
**Answer:** When `fold` = 2 and `epochs` = 30, the best model has `hidden_units` = 10 and `dropout` = 0. The best model has a `roc_auc` value of 0.616 and an `accuracy` of 0.585.

4. Compare model classification performance on the test set. Report both the area under ROC curve and accuracy for each machine learning algorithm and the model stacking. Interpret the results. What are the most important features in predicting long ICU stays? How do the models compare in terms of performance and interpretability?
```{r, eval=TRUE}
set.seed(203)
folds <- vfold_cv(mimic_train, v = 2)

logit_grid <- grid_regular(
  penalty(range = c(-5, 1)), 
  mixture(),
  levels = c(10, 5)
  )

gb_grid <- grid_regular(
  tree_depth(range = c(1L, 4L)),
  learn_rate(range = c(-1.6, -1), trans = log10_trans()),
  levels = c(4, 4)
  )

mlp_grid <- grid_regular(
  hidden_units(range = c(1, 20)),
  dropout(range = c(0, 0.4)),
  levels = 3
  )

logit_res <- 
  tune_grid(
    object = logit_wf, 
    resamples = folds, 
    grid = logit_grid,
    control = control_stack_grid()
  )


```

```{r, eval=TRUE}
gb_res <-
  tune_grid(
    object = gb_wf, 
    resamples = folds, 
    grid = gb_grid,
    control = control_stack_grid()
  )
```

```{r, eval=TRUE}
mlp_res <-
  tune_grid(
    object = mlp_wf, 
    resamples = folds, 
    grid = mlp_grid,
    control = control_stack_grid()
  )
```

```{r, eval=TRUE}
mimic_model_st <- 
  # initialize the stack
  stacks() |>
  # add candidate members
  add_candidates(logit_res) |>
  add_candidates(gb_res) |>
  add_candidates(mlp_res) |>
  # determine how to combine their predictions
  blend_predictions(
    penalty = 10^(-4:0),
    metrics = c("roc_auc"), 
    times = 3
    ) |>
  # fit the candidates with nonzero stacking coefficients
  fit_members()
```

```{r, eval=TRUE}
mimic_model_st

autoplot(mimic_model_st)

autoplot(mimic_model_st, type = "weights")

```
**Answer:** The stacked model includes `XGBoost` and `MLP` as the best model. From the weight plot, we can see the top three all come from `XGBoost` and the first one has the weight which is almost three times the second one. The best penalty is shown in the title of the weight plot. It is surprising that the `Logistic Regression` model is not included in the stacked model. This may be because the `Logistic Regression` model is not as good as the other two models in terms of `roc_auc` and `accuracy`. And the hyperparameters for the `Logistic Regression` model are not tuned so much and the model is not as complex as the other two models. 

```{r, eval=TRUE}
mimic_pred <- mimic_test %>%
  bind_cols(predict(mimic_model_st, ., type = "prob")) %>%
  mutate(predicted = if_else(.pred_TRUE > 0.5, "TRUE", "FALSE")) %>%
  mutate(predicted = as.factor(predicted)) %>%
  print(width = Inf)
```

```{r, eval=TRUE}
final_fit_logit |> 
  collect_metrics()

final_fit_gb |> 
  collect_metrics()

final_fit_mlp |> 
  collect_metrics()

yardstick::accuracy(
  mimic_pred, 
  truth = los_long, 
  estimate = predicted
  )

yardstick::roc_auc(
  mimic_pred,
  truth = los_long,
  contains(".pred_FALSE")
  )
```
::: {.table .table-responsive}
| Model | Accuracy | ROC_AUC |
|-----------|----------|----------------|
| Logistic Regression     | 0.572 | 0.594 |
| XGBoost|  0.597   |   0.636   |
| MLP | 0.585   |      0.616      |
| Stacked Model  | 0.598  | 0.637 |
:::

**Answer:** It seems that stacked model is the best model. It has the highest `ROC_AUC` value of 0.637 and `accuracy` of 0.598. Both are 0.001 higher than those for the `XGBoost` model. The `Logistic Regression` model has the lowest `ROC_AUC` value of 0.594 and `accuracy` of 0.572. The `XGBoost` model has the second highest `ROC_AUC` value of 0.636 and `accuracy` of 0.597. The `MLP` model has a `ROC_AUC` value of 0.616 and `accuracy` of 0.585. It is reasonable that the results of the stacked model is close to but a little higher than the `XGBoost` because the stacked model includes the `XGBoost`, the top three weight results all come from `XGBoost`, and the `XGBoost` model has the highest `ROC_AUC` value and `accuracy` among the three models.
```{r, eval=TRUE}
# feature importance

final_fit_logit |> 
  extract_fit_parsnip() |>
  vip()

final_fit_gb |> 
  extract_fit_parsnip() |>
  vip()

```
**Answer:** The most important features in predicting long ICU stays are `hematocrit`, `age_intime`, `wbc`, `heart_rate`, and `respiratory_rate` in `Logistic Regression` and `XGBoost` models. `Logistic Regression` also considers two categories in `first_careunit` are important features, i.e., `Medical Intensive Care Unit (MICU)` and `Medical/Surgical Intensive Care Unit (MICU/SICU)` and they are the top two important features. It seems to be reasonable because the patients in these two units usually have more severe conditions and are more likely to have long ICU stays. It is surprising that `XGBoost` does not include any categorical variables as important features and it additionally includes `temperature_fahrenheit` as the most important feature. This may be because from `Logistic Regression` importance plot we know there is no `temperature_fahrenheit` in top 10 important features but two `first_careunit` categories are important features. Perhaps `temperature_fahrenheit` is highly correlated with the two `first_careunit` categories and then `XGBoost` shows `temperature_fahrenheit` as a replacement for the two `first_careunit` categories. For `MLP` model, it is hard to interpret the feature importance because it is a black box model. From `RStudio`, it shows model-specific variable importance scores are currently not available for this type of model. For stacked model, it is also hard to interpret the feature importance perhaps because it includes `MLP`.

There seems to be a tradeoff between performance and interpretability. The `Logistic Regression` model is the most interpretable model because it is a generalized linear model and we can interpret the coefficients of the features. However, it has the lowest `ROC_AUC` value and `accuracy`. The `XGBoost` model has the highest `ROC_AUC` value and `accuracy` but it is not as interpretable as the `Logistic Regression` model. The `MLP` model is the least interpretable model because it is a black box model and it has complex non-linear structures. So it is extremely hard or practically impossible to interpret. The stacked model has the highest `ROC_AUC` value and `accuracy` and it is not as interpretable as the `Logistic Regression` model but it is more interpretable than the `MLP` model. This increased interpretability may be due to its ensemble nature, which combines the `XGBoost` and `MLP` models in a weighted manner. The combination of the `XGBoost` and `MLP` models also contributes to the highest `ROC_AUC` value and `accuracy` of the stacked model among the four models. 







