---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 26, 2024 @ 11:59PM
author: "Ziheng Zhang_606300061"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
knitr:
  opts_chunk: 
    cache: false    
    echo: true
    fig.align: 'center'
    fig.width: 6
    fig.height: 4
    message: FALSE
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

2. Create a **private** repository `biostat-203b-2024-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `jonathanhori` and `jasenzhang1` for Lec 80) as your collaborators with write permission.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Answer:** I have finished all the steps above.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v2.2](https://physionet.org/content/mimiciv/2.2/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Answer:** I have finished the CITI training and obtained the PhysioNet credential. The verification link to my completion report is as follows: <https://www.citiprogram.org/verify/?kb2b9764b-f91d-471b-a439-9448b4e5f4a2-60470489>. The verification link to my completion certificate is as follows: <https://www.citiprogram.org/verify/?wb9c162da-a9ca-4f72-9484-118cc2b0f9ca-60470489>.

## Q3. Linux Shell Commands

1. Make the MIMIC v2.2 data available at location `~/mimic`. 

**Answer:** I have downloaded the MIMIC v2.2 data and put them in the folder `~/mimic`. The data files are not put into Git. The data files are not copied into my directory. The gz data files are not decompressed. The following bash command displays the contents in the folder `~/mimic`.
```{bash}
#| eval: true
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/2.2/> for details of data files. Please, do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Answer:** The data files are distributed as `.csv.gz` files instead of `.csv` files because the `.csv.gz` files are compressed and take up less storage space. These compressed files can be transferred more quickly over networks and are easier to manage when it comes to storage and backup processes. The `.csv.gz` files are compressed using the `gzip` command. 

The following bash command displays the contents in the folders `hosp` and `icu`. 
The `hosp` folder contains all data acquired from the hospital wide electronic health record. Information covered includes patient and admission information, laboratory measurements, microbiology, medication administration, and billed diagnoses. 
```{bash}
#| eval: true
ls -l ~/mimic/hosp/
```
The `icu` folder contains information collected from the clinical information system used within the ICU. Documented data includes intravenous administrations, ventilator settings, and other charted items.
```{bash}
#| eval: true
ls -l ~/mimic/icu/
```

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Answer:**  
The `zcat` command is used to display the contents of a compressed file without decompressing them.  
The `zless` command is used to display the contents of a compressed file one page at a time, and if we scroll down or click down button, we can see the next line.  
The `zmore` command is used to display the contents of a compressed file one page at a time, and if we scroll down or click down button, we can see the next page.  
The `zgrep` command is used to search for a specified pattern in a compressed file.

4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
**Answer:** The output of the above bash script is the detailed information about each file with the specified pattern in the `~/mimic/hosp/` directory. The pattern `{a,l,pa}*.gz` means it will match files starting with "a", "l", or "pa" and ending with `.gz`.

Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Answer:** The following bash script displays the number of lines in each data file in the `~/mimic/hosp/` directory. `admissions.csv.gz` has 431232 lines. `labevents.csv.gz` has 118171368 lines. `patients.csv.gz` has 299713 lines.
```{bash}
#| eval: true
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  echo $datafile
  zcat < $datafile | wc -l
done
```
5. Display the first few lines of `admissions.csv.gz`. How many rows are in this data file? How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? (Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Answer:** The following bash script displays the first five lines of `admissions.csv.gz`. There are 431232 rows in this data file, including the header line. There are 180733 unique patients in this data file. It does not match the number of patients listed in the `patients.csv.gz` file, 299712.
```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | head -5
```

```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $1}' | sort | uniq | sed '$d'| wc -l
```
6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `race`? Also report the count for each unique value of these variables. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, and so on; skip the header line.)

**Answer:** The following bash script displays the possible values and the count for each unique value of the variable `admission_type`. There are 9 unique values for the variable `admission_type`, not including the header line. The counts for each unique value are as follows.
```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $6}' | sort | uniq | sed '$d'|wc -l
zcat < ~/mimic/hosp/admissions.csv.gz|awk -F, '{print $6}' | sort | uniq -c|sed '$d'
```
**Answer:** The following bash script displays the possible values and the count for each unique value of the variable `admission_location`. There are 11 unique values for the variable `admission_location`, not including the header line. The counts for each unique value are as follows.
```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $8}' | sort | uniq | sed '$d'|wc -l
zcat < ~/mimic/hosp/admissions.csv.gz|awk -F, '{print $8}' | sort | uniq -c|sed '$d'
```
**Answer:** The following bash script displays the possible values and the count for each unique value of the variable `insurance`. There are 3 unique values for the variable `insurance`, not including the header line. The counts for each unique value are as follows.
```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $10}' | sort | uniq | sed '$d'|wc -l
zcat < ~/mimic/hosp/admissions.csv.gz|awk -F, '{print $10}' | sort | uniq -c|sed '$d'
```
**Answer:** The following bash script displays the possible values and the count for each unique value of the variable `race`. There are 33 unique values for the variable `race`, not including the header line. The counts for each unique value are as follows.
```{bash}
#| eval: true
zcat < ~/mimic/hosp/admissions.csv.gz | awk -F, '{print $13}' | sort | uniq | sed '$d'|wc -l
zcat < ~/mimic/hosp/admissions.csv.gz|awk -F, '{print $13}' | sort | uniq -c|sed '$d'
```

7. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Answer:** The following bash script compares compressed gz file size to the uncompressed file size. The compressed gz file size is 1.8G. The uncompressed file size is 13G, which is much larger than the compressed gz file size.
```{bash}
#| eval: false
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv
du -h ~/mimic/hosp/labevents.csv.gz
du -h labevents.csv 
```
**Answer:** The following bash script compares the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. The run time of `zcat < ~/mimic/labevents.csv.gz | wc -l` is around 13.914s. The run time of `wc -l labevents.csv` is around 15.861s. 
```{bash}
#| eval: false
time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
```

```{bash}
#| eval: false
time wc -l labevents.csv
```

**Answer:** In theory, the trade off between storage and speed for big data files is that compressed files take up less storage space but take longer to run. Uncompressed files take up more storage space but take less time to run. However, in my computer, the run time of `zcat < ~/mimic/labevents.csv.gz | wc -l` is shorter than the run time of `wc -l labevents.csv`. 

**Answer:** Finally, delete the large `labevents.csv` file.
```{bash}
#| eval: false
rm labevents.csv
```
## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

**Answer:** `wget -nc` downloads the file from the URL if it does not exist in the current directory. If the file already exists in the current directory, `wget -nc` does not download the file from the URL and will show that "File already there; not retrieving".
```{bash}
#| eval: true
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o -i $char pg42671.txt | wc -l
done
```
**Answer:** Elizabeth is mentioned 634 times, Jane is mentioned 293 times, Lydia is mentioned 171 times, and Darcy is mentioned 418 times. Therefore, Elizabeth is the most mentioned character in the book.

2. What's the difference between the following two commands?
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```
**Answer:** The first command `echo 'hello, world' > test1.txt` writes the string "hello, world" to the file `test1.txt`. If the file `test1.txt` already exists, the first command will overwrite the file `test1.txt`. The second command `echo 'hello, world' >> test2.txt` appends the string "hello, world" to the file `test2.txt`. If the file `test2.txt` already exists, the second command will append the string "hello, world" to the end of the file `test2.txt` without overwriting its existing content.

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```

```{bash}
#| eval: true
chmod u+x ./middle.sh
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: true
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Answer:** The output of `./middle.sh pg42671.txt 20 5` is the 5 lines from line 16 to line 20 of the file `pg42671.txt`. `"$1"` is the first argument of the shell script, which is the file name `pg42671.txt`. `"$2"` is the second argument of the shell script, which is the end line number `20`. `"$3"` is the third argument of the shell script, which is the number of lines `5`. We need the first line of the shell script `#!/bin/sh` to tell the shell which interpreter to use to run the shell script.

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2024`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

```{bash}
#| eval: true
cal
```
**Answer:** The `cal` command displays a calendar for the current month.


```{bash}
#| eval: true
cal 2024
```
**Answer:** The `cal 2024` command displays a calendar for the year 2024.


```{bash}
#| eval: true
cal 9 1752
```
**Answer:** The `cal 9 1752` command displays a calendar for the month of September in the year 1752. The calendar for the month of September in the year 1752 is unusual because the calendar for the month of September in the year 1752 is missing 11 days, from 3rd to 13 th. The calendar for the month of September in the year 1752 is missing 11 days because the British Empire and its colonies switched from the Julian calendar to the Gregorian calendar in September 1752. The Julian calendar was 11 days behind the Gregorian calendar. Therefore, the calendar for the month of September in the year 1752 is missing 11 days.


```{bash}
#| eval: true
date
```
**Answer:** The `date` command displays the current date and time.


```{bash}
#| eval: true
hostname
```
**Answer:** The `hostname` command displays the name of the current host system. It is used to obtain the DNS (Domain Name System) name and set the system’s hostname or NIS (Network Information System) domain name.


```{bash}
#| eval: true
arch
```
**Answer:** The `arch` command displays the architectural information about the computer.


```{bash}
#| eval: true
uname -a
```
**Answer:** The `uname -a` command displays the the name, version and other details about the operating system and the hardware. Paramater `-a` means reveal all the information.


```{bash}
#| eval: true
uptime
```
**Answer:** The `uptime` command displays the current time, how long the system has been running, how many users are currently logged on, and the system load averages for the past 1, 5, and 15 minutes.


```{bash}
#| eval: true
who am i
```
**Answer:** The `who am i` command displays the login information of the current user.


```{bash}
#| eval: true
who
```
**Answer:** The `who` command displays the login information of users who log in to the UNIX or Linux operating system.


```{bash}
#| eval: true
w
```
**Answer:** The `w` command displays the login information of all users and what they are doing.


```{bash}
#| eval: true
id
```
**Answer:** The `id` command displays the current user's user and group IDs. "uid" is the user ID and it is a unique identification in the system. "gid" is the group ID and it is the a unique identification that represents the primary group to which the user belongs. "groups" is additional groups and it is a unique identification of other additional groups to which the user belongs.


```{bash}
#| eval: true
last | head
```
**Answer:** The `last | head` command displays the last 10 users logged on.


```{bash}
#| eval: true
echo {con,pre}{sent,fer}{s,ed}
```
**Answer:** The `echo {con,pre}{sent,fer}{s,ed}` command gives us the combination of all the possible words. It selects the contents in curly brackets and groups them together. Each time, it selects one word from each curly bracket and combines them. Then, it displays all the possible combinations of the words in curly brackets.


```{bash}
#| eval: true
time sleep 5
```
**Answer:** The `time sleep 5` command displays the time it takes to run the command `sleep 5`, which is 5 seconds. `sleep` command is used to delay the next command execution in the script for a fixed amount of time.


```{bash}
#| eval: true
history | tail
```
<p align="center">
<img src="./Q5.png" width="100%"/>
</p>

**Answer:** The `history | tail` command displays the last 10 commands that were run in the bash shell.

## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. 

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` but not `pdf_book`.)

The point of this exercise is (1) to get the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Answer:** 
<p align="center">
<img src="./section415.png" width="100%"/>
</p>





